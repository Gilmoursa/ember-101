# Conventions
We will explore some of the basic conventions and best practices both in `Ember.js` and `ember-cli`.

## In your code

- Use `camelCase` even if you are writing `CoffeeScript`.
- Avoid globals as much as possible: `ember-cli` supports `ES6 Modules` out of the box so you can write your app in a modular way.
- Create custom `shims` for apps that are not distributed in `AMD` format: we will cover this in a subsequent chapter, but the basic idea is to treat libraries that are not written with `ES6 Modules` as if they were.
- Create reusable code: if there is a functionality you are using in several different places, remember that `Ember.js` offers an [Ember.Mixin class](http://emberjs.com/api/classes/Ember.Mixin.html) that you can then reuse in different parts. If you think other people can benefit from this, create an add-on.

## In your project

- Name your files using kebab-case: Use hyphens instead of underscores to separate words in a file name. For example, if you have a model called `InvoiceItem`, `ember-cli` expects this model to be under `app/models/invoice-item.js`.
- Optionally, include the file type at the beginning: Some people like to include the file type in the name of the file (e.g. `app/routes/route-index.js`). I personally prefer not to do this, but if you want to, just remember to include it at the beginning. Otherwise, your app will not be able to find (in this case) the `IndexRoute`.
- Put child files in subdirectories:
  - app/routes/invoice-item/index.js
  - app/controllers/invoice-items/index.js
